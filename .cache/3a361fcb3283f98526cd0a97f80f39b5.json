{"id":"4u+Q","dependencies":[{"name":"c:\\Users\\kotka\\Dev\\hrafnkellbaldurs-github-io\\hrafnkellbaldurs-github-io\\node_modules\\prop-types\\package.json","includedInParent":true,"mtime":1532874097694},{"name":"c:\\Users\\kotka\\Dev\\hrafnkellbaldurs-github-io\\hrafnkellbaldurs-github-io\\package.json","includedInParent":true,"mtime":1532876819721},{"name":"c:\\Users\\kotka\\Dev\\hrafnkellbaldurs-github-io\\hrafnkellbaldurs-github-io\\.babelrc","includedInParent":true,"mtime":1532871921309}],"generated":{"js":"\"use strict\";var t,n,o=function(){};function u(t,n,o,u,c){}module.exports=u;","map":{"mappings":[{"source":"node_modules\\prop-types\\checkPropTypes.js","original":{"line":8,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\prop-types\\checkPropTypes.js","original":{"line":10,"column":0},"generated":{"line":1,"column":13}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"ReactPropTypesSecret","original":{"line":13,"column":6},"generated":{"line":1,"column":17}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"loggedTypeFailures","original":{"line":14,"column":6},"generated":{"line":1,"column":19}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"printWarning","original":{"line":10,"column":4},"generated":{"line":1,"column":21}},{"source":"node_modules\\prop-types\\checkPropTypes.js","original":{"line":10,"column":19},"generated":{"line":1,"column":23}},{"source":"node_modules\\prop-types\\checkPropTypes.js","original":{"line":41,"column":0},"generated":{"line":1,"column":36}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"checkPropTypes","original":{"line":41,"column":9},"generated":{"line":1,"column":45}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"typeSpecs","original":{"line":41,"column":24},"generated":{"line":1,"column":47}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"values","original":{"line":41,"column":35},"generated":{"line":1,"column":49}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"location","original":{"line":41,"column":43},"generated":{"line":1,"column":51}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"componentName","original":{"line":41,"column":53},"generated":{"line":1,"column":53}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"getStack","original":{"line":41,"column":68},"generated":{"line":1,"column":55}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"module","original":{"line":91,"column":0},"generated":{"line":1,"column":59}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"exports","original":{"line":91,"column":7},"generated":{"line":1,"column":66}},{"source":"node_modules\\prop-types\\checkPropTypes.js","name":"checkPropTypes","original":{"line":91,"column":17},"generated":{"line":1,"column":74}}],"sources":{"node_modules\\prop-types\\checkPropTypes.js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          )\n\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n"},"lineCount":null}},"hash":"05927eac41e4e2c3fe03a91195fb793b","cacheData":{"env":{"NODE_ENV":"production"}}}